{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://your-backend-api/notifications'; // Replace with your API URL\n  }\n\n  getAllNotifications() {\n    return this.http.get(this.apiUrl);\n  }\n  getNotificationsByUserId(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  createNotification(notification) {\n    return this.http.post(this.apiUrl, notification);\n  }\n  updateNotification(id, notification) {\n    return this.http.put(`${this.apiUrl}/${id}`, notification);\n  }\n  deleteNotification(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["NotificationService","constructor","http","apiUrl","getAllNotifications","get","getNotificationsByUserId","userId","createNotification","notification","post","updateNotification","id","put","deleteNotification","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ufl\\Downloads\\sbitar\\front\\medilink-microfront\\src\\app\\Services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Notification } from '../models/notification';\nimport { NotificationStatus } from '../models/notification-status';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private apiUrl = 'http://your-backend-api/notifications'; // Replace with your API URL\n\n  constructor(private http: HttpClient) {}\n\n  getAllNotifications(): Observable<Notification[]> {\n    return this.http.get<Notification[]>(this.apiUrl);\n  }\n\n  getNotificationsByUserId(userId: number): Observable<Notification[]> {\n    return this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}`);\n  }\n\n  createNotification(notification: Notification): Observable<Notification> {\n    return this.http.post<Notification>(this.apiUrl, notification);\n  }\n\n  updateNotification(id: number, notification: Notification): Observable<Notification> {\n    return this.http.put<Notification>(`${this.apiUrl}/${id}`, notification);\n  }\n\n  deleteNotification(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}"],"mappings":";;AASA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uCAAuC,CAAC,CAAC;EAEnB;;EAEvCC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,IAAI,CAACF,MAAM,CAAC;EACnD;EAEAG,wBAAwBA,CAACC,MAAc;IACrC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,SAASI,MAAM,EAAE,CAAC;EACvE;EAEAC,kBAAkBA,CAACC,YAA0B;IAC3C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAe,IAAI,CAACP,MAAM,EAAEM,YAAY,CAAC;EAChE;EAEAE,kBAAkBA,CAACC,EAAU,EAAEH,YAA0B;IACvD,OAAO,IAAI,CAACP,IAAI,CAACW,GAAG,CAAe,GAAG,IAAI,CAACV,MAAM,IAAIS,EAAE,EAAE,EAAEH,YAAY,CAAC;EAC1E;EAEAK,kBAAkBA,CAACF,EAAU;IAC3B,OAAO,IAAI,CAACV,IAAI,CAACa,MAAM,CAAO,GAAG,IAAI,CAACZ,MAAM,IAAIS,EAAE,EAAE,CAAC;EACvD;;;uBAvBWZ,mBAAmB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAnBnB,mBAAmB;MAAAoB,OAAA,EAAnBpB,mBAAmB,CAAAqB,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}