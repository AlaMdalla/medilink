{"ast":null,"code":"import { environment } from 'src/app/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubscriptionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  getSubscriptions() {\n    return this.http.get(`${this.apiUrl}/subs/all`);\n  }\n  getSubscription(id) {\n    return this.http.get(`${this.apiUrl}/subs/${id}`);\n  }\n  addSubscription(sub) {\n    return this.http.post(`${this.apiUrl}/subs/add`, sub);\n  }\n  updateSubscription(id, sub) {\n    return this.http.put(`${this.apiUrl}/subs/update/${id}`, sub);\n  }\n  deleteSubscription(id) {\n    return this.http.delete(`${this.apiUrl}/subs/delete/${id}`, {\n      responseType: 'text'\n    });\n  }\n  createPayment(data) {\n    return this.http.post(`${this.apiUrl}/payment/create`, data, {\n      responseType: 'text'\n    });\n  }\n  getStatus(subid) {\n    return this.http.get(`${this.apiUrl}/subs/status/${subid}`, {\n      responseType: 'text'\n    });\n  }\n  cancelSubscription(subid, reason) {\n    const body = {\n      reason\n    }; // Send the reason for cancellation (optional, if needed)\n    return this.http.post(`${this.apiUrl}/subs/cancel/${subid}`, body); // Updated URL with path parameter\n  }\n\n  static {\n    this.ɵfac = function SubscriptionService_Factory(t) {\n      return new (t || SubscriptionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubscriptionService,\n      factory: SubscriptionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","SubscriptionService","constructor","http","apiUrl","getSubscriptions","get","getSubscription","id","addSubscription","sub","post","updateSubscription","put","deleteSubscription","delete","responseType","createPayment","data","getStatus","subid","cancelSubscription","reason","body","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ufl\\Downloads\\sbitar\\front\\medilink-microfront\\src\\app\\Services\\subscription.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/app/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscriptionService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  getSubscriptions(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/subs/all`);\n  }\n\n  getSubscription(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/subs/${id}`);\n  }\n\n  addSubscription(sub: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/subs/add`, sub);\n  }\n\n  updateSubscription(id: number, sub: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/subs/update/${id}`, sub);\n  }\n\n  deleteSubscription(id: number): Observable<string> {\n    return this.http.delete(`${this.apiUrl}/subs/delete/${id}`, { responseType: 'text' });\n  }\n\n  createPayment(data: { subid: number; amount: string; currency: string; description: string }): Observable<string> {\n    return this.http.post(`${this.apiUrl}/payment/create`, data, { responseType: 'text' });\n  }\n\n  getStatus(subid: number): Observable<string> {\n    return this.http.get(`${this.apiUrl}/subs/status/${subid}`, { responseType: 'text' });\n  }\n  cancelSubscription(subid: number, reason: string): Observable<any> {\n    const body = { reason };  // Send the reason for cancellation (optional, if needed)\n    return this.http.post<any>(`${this.apiUrl}/subs/cancel/${subid}`, body);  // Updated URL with path parameter\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,kCAAkC;;;AAM9D,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM;EAEI;EAEvCC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,WAAW,CAAC;EACxD;EAEAG,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,SAASI,EAAE,EAAE,CAAC;EACxD;EAEAC,eAAeA,CAACC,GAAQ;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEM,GAAG,CAAC;EACvD;EAEAE,kBAAkBA,CAACJ,EAAU,EAAEE,GAAQ;IACrC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACT,MAAM,gBAAgBI,EAAE,EAAE,EAAEE,GAAG,CAAC;EAC/D;EAEAI,kBAAkBA,CAACN,EAAU;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACX,MAAM,gBAAgBI,EAAE,EAAE,EAAE;MAAEQ,YAAY,EAAE;IAAM,CAAE,CAAC;EACvF;EAEAC,aAAaA,CAACC,IAA8E;IAC1F,OAAO,IAAI,CAACf,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,iBAAiB,EAAEc,IAAI,EAAE;MAAEF,YAAY,EAAE;IAAM,CAAE,CAAC;EACxF;EAEAG,SAASA,CAACC,KAAa;IACrB,OAAO,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,gBAAgBgB,KAAK,EAAE,EAAE;MAAEJ,YAAY,EAAE;IAAM,CAAE,CAAC;EACvF;EACAK,kBAAkBA,CAACD,KAAa,EAAEE,MAAc;IAC9C,MAAMC,IAAI,GAAG;MAAED;IAAM,CAAE,CAAC,CAAE;IAC1B,OAAO,IAAI,CAACnB,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,MAAM,gBAAgBgB,KAAK,EAAE,EAAEG,IAAI,CAAC,CAAC,CAAE;EAC5E;;;;uBAnCWtB,mBAAmB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAnB1B,mBAAmB;MAAA2B,OAAA,EAAnB3B,mBAAmB,CAAA4B,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}