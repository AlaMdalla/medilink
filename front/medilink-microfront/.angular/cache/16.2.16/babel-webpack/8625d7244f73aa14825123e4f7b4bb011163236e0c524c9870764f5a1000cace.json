{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Services/prescription.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nfunction PrescriptionFormComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Doctor ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PrescriptionFormComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Patient ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PrescriptionFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Date is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PrescriptionFormComponent {\n  constructor(fb, prescriptionService, route, router, snackBar) {\n    this.fb = fb;\n    this.prescriptionService = prescriptionService;\n    this.route = route;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.isEditMode = false;\n    this.prescriptionForm = this.fb.group({\n      doctorId: ['', Validators.required],\n      patientId: ['', Validators.required],\n      date: ['', Validators.required],\n      medicationList: ['']\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.prescriptionId = +id;\n        this.prescriptionService.getPrescriptionById(this.prescriptionId).subscribe({\n          next: prescription => {\n            this.prescriptionForm.patchValue(prescription);\n          },\n          error: () => this.snackBar.open('Error loading prescription', 'Close', {\n            duration: 3000\n          })\n        });\n      }\n    });\n  }\n  onSubmit() {\n    if (this.prescriptionForm.valid) {\n      const prescription = this.prescriptionForm.value;\n      if (this.isEditMode && this.prescriptionId) {\n        this.prescriptionService.updatePrescription(this.prescriptionId, prescription).subscribe({\n          next: () => {\n            this.snackBar.open('Prescription updated', 'Close', {\n              duration: 2000\n            });\n            this.router.navigate(['/prescriptions']);\n          },\n          error: () => this.snackBar.open('Error updating prescription', 'Close', {\n            duration: 3000\n          })\n        });\n      } else {\n        this.prescriptionService.createPrescription(prescription).subscribe({\n          next: () => {\n            this.snackBar.open('Prescription created', 'Close', {\n              duration: 2000\n            });\n            this.router.navigate(['/prescriptions']);\n          },\n          error: () => this.snackBar.open('Error creating prescription', 'Close', {\n            duration: 3000\n          })\n        });\n      }\n    }\n  }\n  onCancel() {\n    this.router.navigate(['/prescriptions']);\n  }\n  static {\n    this.ɵfac = function PrescriptionFormComponent_Factory(t) {\n      return new (t || PrescriptionFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PrescriptionService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PrescriptionFormComponent,\n      selectors: [[\"app-prescription-form\"]],\n      decls: 31,\n      vars: 7,\n      consts: [[1, \"rendezvous-container\"], [1, \"form-title\"], [1, \"rendezvous-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"doctorId\", 1, \"form-label\"], [\"id\", \"doctorId\", \"type\", \"number\", \"formControlName\", \"doctorId\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"patientId\", 1, \"form-label\"], [\"id\", \"patientId\", \"type\", \"number\", \"formControlName\", \"patientId\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"date\", 1, \"form-label\"], [\"id\", \"date\", \"type\", \"date\", \"formControlName\", \"date\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"medicationList\", 1, \"form-label\"], [\"id\", \"medicationList\", \"formControlName\", \"medicationList\", \"placeholder\", \"e.g., Aspirin, Ibuprofen\", 1, \"form-control\"], [1, \"form-actions\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"routerLink\", \"/prescriptions\", 1, \"btn\", \"btn-secondary\"], [1, \"error-message\"]],\n      template: function PrescriptionFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function PrescriptionFormComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Doctor ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵtemplate(8, PrescriptionFormComponent_div_8_Template, 2, 0, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 7);\n          i0.ɵɵtext(11, \"Patient ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 8);\n          i0.ɵɵtemplate(13, PrescriptionFormComponent_div_13_Template, 2, 0, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 3)(15, \"label\", 9);\n          i0.ɵɵtext(16, \"Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 10);\n          i0.ɵɵtemplate(18, PrescriptionFormComponent_div_18_Template, 2, 0, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 3)(20, \"label\", 11);\n          i0.ɵɵtext(21, \"Medications (comma-separated)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"div\", 13)(24, \"button\", 14);\n          i0.ɵɵtext(25);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function PrescriptionFormComponent_Template_button_click_26_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵtext(27, \"Cancel\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(28, \"div\")(29, \"a\", 16);\n          i0.ɵɵtext(30, \"Back to Prescriptions\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_4_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Edit Prescription\" : \"Add Prescription\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.prescriptionForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.prescriptionForm.get(\"doctorId\")) == null ? null : tmp_2_0.hasError(\"required\")) && ((tmp_2_0 = ctx.prescriptionForm.get(\"doctorId\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.prescriptionForm.get(\"patientId\")) == null ? null : tmp_3_0.hasError(\"required\")) && ((tmp_3_0 = ctx.prescriptionForm.get(\"patientId\")) == null ? null : tmp_3_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.prescriptionForm.get(\"date\")) == null ? null : tmp_4_0.hasError(\"required\")) && ((tmp_4_0 = ctx.prescriptionForm.get(\"date\")) == null ? null : tmp_4_0.touched));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"disabled\", ctx.prescriptionForm.invalid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Create\", \" \");\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink],\n      styles: [\".rendezvous-container[_ngcontent-%COMP%] {\\n    max-width: 800px;\\n    margin: 2rem auto;\\n    padding: 2rem;\\n    background: #fff;\\n    border-radius: 8px;\\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\\n  }\\n  \\n  .form-title[_ngcontent-%COMP%] {\\n    color: #2c3e50;\\n    text-align: center;\\n    margin-bottom: 1.5rem;\\n    font-weight: 600;\\n  }\\n  \\n  .rendezvous-form[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1.5rem;\\n  }\\n  \\n  .form-group[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.5rem;\\n  }\\n  \\n  .form-label[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n    color: #4a5568;\\n    font-size: 0.9rem;\\n  }\\n  \\n  .form-control[_ngcontent-%COMP%] {\\n    padding: 0.75rem;\\n    border: 1px solid #e2e8f0;\\n    border-radius: 4px;\\n    font-size: 1rem;\\n    transition: border-color 0.2s;\\n    width: 100%;\\n    box-sizing: border-box;\\n  }\\n  \\n  .form-control[_ngcontent-%COMP%]:focus {\\n    outline: none;\\n    border-color: #4299e1;\\n    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);\\n  }\\n  \\n  .form-control[_ngcontent-%COMP%]::placeholder {\\n    color: #a0aec0;\\n    font-style: italic;\\n  }\\n  \\n  .error-message[_ngcontent-%COMP%] {\\n    padding: 0.75rem;\\n    background-color: #fff5f5;\\n    color: #e53e3e;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n    gap: 0.5rem;\\n    font-size: 0.9rem;\\n  }\\n  \\n  .form-actions[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: flex-end;\\n    gap: 1rem;\\n    margin-top: 1rem;\\n  }\\n  \\n  .btn[_ngcontent-%COMP%] {\\n    padding: 0.75rem 1.5rem;\\n    border: none;\\n    border-radius: 4px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%] {\\n    background-color: #4299e1;\\n    color: white;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%]:hover {\\n    background-color: #3182ce;\\n  }\\n  \\n  .btn-primary[disabled][_ngcontent-%COMP%] {\\n    background-color: #b3d4fc;\\n    color: rgba(255, 255, 255, 0.7);\\n    cursor: not-allowed;\\n  }\\n  \\n  .btn-secondary[_ngcontent-%COMP%] {\\n    background-color: #e2e8f0;\\n    color: #4a5568;\\n  }\\n  \\n  .btn-secondary[_ngcontent-%COMP%]:hover {\\n    background-color: #cbd5e0;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcHJlc2NyaXB0aW9uLWZvcm0vcHJlc2NyaXB0aW9uLWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIseUNBQXlDO0VBQzNDOztFQUVBO0lBQ0UsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixXQUFXO0VBQ2I7O0VBRUE7SUFDRSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFdBQVc7RUFDYjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLDZCQUE2QjtJQUM3QixXQUFXO0lBQ1gsc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQiw2Q0FBNkM7RUFDL0M7O0VBRUE7SUFDRSxjQUFjO0lBQ2Qsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsV0FBVztJQUNYLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLGFBQWE7SUFDYix5QkFBeUI7SUFDekIsU0FBUztJQUNULGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLHVCQUF1QjtJQUN2QixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7RUFDZDs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFDL0IsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLGNBQWM7RUFDaEI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyIucmVuZGV6dm91cy1jb250YWluZXIge1xuICAgIG1heC13aWR0aDogODAwcHg7XG4gICAgbWFyZ2luOiAycmVtIGF1dG87XG4gICAgcGFkZGluZzogMnJlbTtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuICBcbiAgLmZvcm0tdGl0bGUge1xuICAgIGNvbG9yOiAjMmMzZTUwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgfVxuICBcbiAgLnJlbmRlenZvdXMtZm9ybSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGdhcDogMS41cmVtO1xuICB9XG4gIFxuICAuZm9ybS1ncm91cCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGdhcDogMC41cmVtO1xuICB9XG4gIFxuICAuZm9ybS1sYWJlbCB7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBjb2xvcjogIzRhNTU2ODtcbiAgICBmb250LXNpemU6IDAuOXJlbTtcbiAgfVxuICBcbiAgLmZvcm0tY29udHJvbCB7XG4gICAgcGFkZGluZzogMC43NXJlbTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZTJlOGYwO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBmb250LXNpemU6IDFyZW07XG4gICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMnM7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBcbiAgLmZvcm0tY29udHJvbDpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXItY29sb3I6ICM0Mjk5ZTE7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoNjYsIDE1MywgMjI1LCAwLjEpO1xuICB9XG4gIFxuICAuZm9ybS1jb250cm9sOjpwbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICNhMGFlYzA7XG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xuICB9XG4gIFxuICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgcGFkZGluZzogMC43NXJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmNWY1O1xuICAgIGNvbG9yOiAjZTUzZTNlO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ2FwOiAwLjVyZW07XG4gICAgZm9udC1zaXplOiAwLjlyZW07XG4gIH1cbiAgXG4gIC5mb3JtLWFjdGlvbnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBnYXA6IDFyZW07XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgfVxuICBcbiAgLmJ0biB7XG4gICAgcGFkZGluZzogMC43NXJlbSAxLjVyZW07XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgfVxuICBcbiAgLmJ0bi1wcmltYXJ5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI5OWUxO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgfVxuICBcbiAgLmJ0bi1wcmltYXJ5OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzE4MmNlO1xuICB9XG4gIFxuICAuYnRuLXByaW1hcnlbZGlzYWJsZWRdIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNkNGZjO1xuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgfVxuICBcbiAgLmJ0bi1zZWNvbmRhcnkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMmU4ZjA7XG4gICAgY29sb3I6ICM0YTU1Njg7XG4gIH1cbiAgXG4gIC5idG4tc2Vjb25kYXJ5OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2JkNWUwO1xuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","PrescriptionFormComponent","constructor","fb","prescriptionService","route","router","snackBar","isEditMode","prescriptionForm","group","doctorId","required","patientId","date","medicationList","ngOnInit","paramMap","subscribe","params","id","get","prescriptionId","getPrescriptionById","next","prescription","patchValue","error","open","duration","onSubmit","valid","value","updatePrescription","navigate","createPrescription","onCancel","ɵɵdirectiveInject","i1","FormBuilder","i2","PrescriptionService","i3","ActivatedRoute","Router","i4","MatSnackBar","selectors","decls","vars","consts","template","PrescriptionFormComponent_Template","rf","ctx","ɵɵlistener","PrescriptionFormComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵtemplate","PrescriptionFormComponent_div_8_Template","PrescriptionFormComponent_div_13_Template","PrescriptionFormComponent_div_18_Template","PrescriptionFormComponent_Template_button_click_26_listener","ɵɵadvance","ɵɵtextInterpolate","ɵɵproperty","tmp_2_0","hasError","touched","tmp_3_0","tmp_4_0","invalid","ɵɵtextInterpolate1"],"sources":["C:\\Users\\ufl\\Downloads\\sbitar\\front\\medilink-microfront\\src\\app\\prescription-form\\prescription-form.component.ts","C:\\Users\\ufl\\Downloads\\sbitar\\front\\medilink-microfront\\src\\app\\prescription-form\\prescription-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PrescriptionService } from '../Services/prescription.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-prescription-form',\n  templateUrl: './prescription-form.component.html',\n  styleUrls: ['./prescription-form.component.css']\n})\nexport class PrescriptionFormComponent implements OnInit {\n  prescriptionForm: FormGroup;\n  isEditMode = false;\n  prescriptionId?: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private prescriptionService: PrescriptionService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) {\n    this.prescriptionForm = this.fb.group({\n      doctorId: ['', Validators.required],\n      patientId: ['', Validators.required],\n      date: ['', Validators.required],\n      medicationList: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.prescriptionId = +id;\n        this.prescriptionService.getPrescriptionById(this.prescriptionId).subscribe({\n          next: (prescription) => {\n            this.prescriptionForm.patchValue(prescription);\n          },\n          error: () => this.snackBar.open('Error loading prescription', 'Close', { duration: 3000 })\n        });\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.prescriptionForm.valid) {\n      const prescription = this.prescriptionForm.value;\n      if (this.isEditMode && this.prescriptionId) {\n        this.prescriptionService.updatePrescription(this.prescriptionId, prescription).subscribe({\n          next: () => {\n            this.snackBar.open('Prescription updated', 'Close', { duration: 2000 });\n            this.router.navigate(['/prescriptions']);\n          },\n          error: () => this.snackBar.open('Error updating prescription', 'Close', { duration: 3000 })\n        });\n      } else {\n        this.prescriptionService.createPrescription(prescription).subscribe({\n          next: () => {\n            this.snackBar.open('Prescription created', 'Close', { duration: 2000 });\n            this.router.navigate(['/prescriptions']);\n          },\n          error: () => this.snackBar.open('Error creating prescription', 'Close', { duration: 3000 })\n        });\n      }\n    }\n  }\n  onCancel(): void {\n    this.router.navigate(['/prescriptions']);\n  }\n}","<div class=\"rendezvous-container\">\n  <h2 class=\"form-title\">{{ isEditMode ? 'Edit Prescription' : 'Add Prescription' }}</h2>\n  <form [formGroup]=\"prescriptionForm\" (ngSubmit)=\"onSubmit()\" class=\"rendezvous-form\">\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"doctorId\">Doctor ID</label>\n      <input\n        class=\"form-control\"\n        id=\"doctorId\"\n        type=\"number\"\n        formControlName=\"doctorId\"\n        required\n      />\n      <div\n        class=\"error-message\"\n        *ngIf=\"prescriptionForm.get('doctorId')?.hasError('required') && prescriptionForm.get('doctorId')?.touched\"\n      >\n        Doctor ID is required\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"patientId\">Patient ID</label>\n      <input\n        class=\"form-control\"\n        id=\"patientId\"\n        type=\"number\"\n        formControlName=\"patientId\"\n        required\n      />\n      <div\n        class=\"error-message\"\n        *ngIf=\"prescriptionForm.get('patientId')?.hasError('required') && prescriptionForm.get('patientId')?.touched\"\n      >\n        Patient ID is required\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"date\">Date</label>\n      <input\n        class=\"form-control\"\n        id=\"date\"\n        type=\"date\"\n        formControlName=\"date\"\n        required\n      />\n      <div\n        class=\"error-message\"\n        *ngIf=\"prescriptionForm.get('date')?.hasError('required') && prescriptionForm.get('date')?.touched\"\n      >\n        Date is required\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"medicationList\">Medications (comma-separated)</label>\n      <input\n        class=\"form-control\"\n        id=\"medicationList\"\n        formControlName=\"medicationList\"\n        placeholder=\"e.g., Aspirin, Ibuprofen\"\n      />\n    </div>\n\n    <div class=\"form-actions\">\n      <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"prescriptionForm.invalid\">\n        {{ isEditMode ? 'Update' : 'Create' }}\n      </button>\n      <button class=\"btn btn-secondary\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\n    </div>\n  </form>\n  <div>\n    <a routerLink=\"/prescriptions\" class=\"btn btn-secondary\">Back to Prescriptions</a>\n  </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}